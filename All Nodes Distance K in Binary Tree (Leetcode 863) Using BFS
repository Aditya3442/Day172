class Solution {
    public void parentTrack(Map<TreeNode , TreeNode> parent , TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode curr = q.poll();
            if(curr.left != null){
                parent.put(curr.left , curr);
                q.offer(curr.left);
            }
            if(curr.right != null){
                parent.put(curr.right , curr);
                q.offer(curr.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode , TreeNode> parent = new HashMap<>();
        parentTrack(parent , root);
        Map<TreeNode , Boolean> check = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        check.put(target , true);
        int x = 0;
        while(!q.isEmpty()){
            int size = q.size();
            if(x == k)
              break;
            x++;
            for(int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                if(curr.left != null && check.get(curr.left) == null){
                    q.offer(curr.left);
                    check.put(curr.left , true);
                }
                if(curr.right != null && check.get(curr.right) == null){
                    q.offer(curr.right);
                    check.put(curr.right , true);
                }
                if(parent.get(curr) != null && check.get(parent.get(curr)) == null){
                    q.offer(parent.get(curr));
                    check.put(parent.get(curr) , true);
                }
            }
        }
        List<Integer> list = new ArrayList<>();
        while(!q.isEmpty()){
            list.add(q.poll().val);
        }
        return list;
    }
}
