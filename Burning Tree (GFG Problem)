class Solution {
    /*class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }*/
    public static Node parent(Node root , Map<Node , Node> parentTrack , int target){
        Queue<Node> q = new LinkedList<>();
        Node res = root;
        q.offer(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr.data == target)
               res = curr;
            if(curr.left != null){
                parentTrack.put(curr.left, curr);
                q.offer(curr.left);
            }
            if(curr.right != null){
                parentTrack.put(curr.right , curr);
                q.offer(curr.right);
            }
        }
        return res;
    }

    public static int minTime(Node root, int target) {
        // code here
        Map<Node , Node> parentTrack = new HashMap<>();
        Node targetNode = parent(root , parentTrack , target);
        Map<Node , Boolean> visited = new HashMap<>();
        Queue<Node> q = new LinkedList<>();
        q.offer(targetNode);
        visited.put(targetNode , true);
        int ans = 0;
        while(!q.isEmpty()){
            int size = q.size();
            boolean isCheck = false;
            for(int i = 0; i < size; i++){
                Node curr = q.poll();
                if(curr.left != null && visited.get(curr.left) == null){
                    isCheck =true;
                    q.offer(curr.left);
                    visited.put(curr.left , true);
                }
                if(curr.right != null && visited.get(curr.right) == null){
                    isCheck = true;
                    q.offer(curr.right);
                    visited.put(curr.right , true);
                }
                if(parentTrack.get(curr) != null && visited.get(parentTrack.get(curr)) == null){
                    isCheck = true;
                    q.offer(parentTrack.get(curr));
                    visited.put(parentTrack.get(curr) , true);
                }
            }
            if(isCheck)
               ans++;
        }
        return ans;
    }
}
